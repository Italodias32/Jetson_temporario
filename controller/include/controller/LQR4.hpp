
#include <Eigen/Eigen>


class lqr_vant4 
{
	private: int Iterations;	
	private: Eigen::VectorXd Xref;
	private: Eigen::VectorXd Erro;
	private: Eigen::VectorXd Input;
	private: Eigen::MatrixXd K;
	private: Eigen::VectorXd X;
	private: double T; // Sampled time
	
	public: lqr_vant4(): Xref(16), Erro(16),Input(4), K(4,16), X(16)
	{
		T = 0.012;
		Iterations = 0;
	}
	public: ~lqr_vant4(){}
	public: void config()
	{
	
std::cout << "teste2" << std::endl;

/*K << -4.9984 ,   5.0943 , -40.2674 ,   0.0396 ,   0.4630 ,   0.0019  ,  2.4259  ,  3.8526 ,  -0.0468  ,  0.0608 ,-18.0093 ,   0.0291  ,  0.4230  ,  0.0047  ,  5.4502  ,  6.6536,
    5.1234 ,  -5.0423 ,  40.5308  ,  0.0436 ,  -0.4660  ,  0.0015 ,  -2.4429  ,  3.8252  ,  0.0608  , -0.0476, 18.1119 ,   0.0291 ,  -0.4253,    0.0034,   -5.4875,    6.6059,
    0.4275,    0.2255,    0.1403,    0.1426,    0.0163,    0.0086,   -0.0081,   -0.0036,    0.0942,    0.0046, 0.0656,    0.0633,    0.0220 ,   0.0180,   -0.0185,   -0.0062,
    0.2267,    0.4242,   -0.1413 ,   0.1419 ,  -0.0164 ,   0.0085  ,  0.0082 ,  -0.0036  ,  0.0046  ,  0.0941 ,-0.0660 ,   0.0631,   -0.0220,    0.0179  ,  0.0187 ,  -0.0062;*/

K <<-4.5963,    4.5310, -189.2610,    0.4709,   -0.2079,    0.3242,  234.7676,   355.5676,   -0.0531,    0.0619,  -22.4682,    0.0690,   -0.3126,    0.1859,  106.6456,   63.0998,
	4.5066,   -4.6478,  188.7322,    0.3671,    0.2087,    0.2050, -234.7688,  354.0207,    0.0614,   -0.0542,   22.3435,    0.0548,    0.3135,    0.1222,  -106.5175,   62.7401,
	0.8198,    0.6216,    0.5906,    1.2474,    0.0188,    0.8050,   -0.6887,    -0.3321,    0.0978,    0.0081,    0.0790,    0.1910,    0.0248,    0.4599,     -0.3188,   -0.0590,
	0.6231,    0.8215,   -0.5932,    1.2617,   -0.0181,    0.8338,    0.6933,   -0.3330,    0.0081,    0.0977,   -0.0787,    0.1910,   -0.0238,    0.4707,     0.3207,   -0.0589;


/*K << -0.708576,	0.664812,	-14.986776,	-0.776799,	0.118369,	-0.268399,	6.965978,	7.071208,	-0.001229,	-0.002073,	-2.713855,	-0.003877,	0.147773,	-0.242210,	5.515657,	7.664070,
0.710318,	-0.662794,	14.986949,	1.058387,	-0.118370,	0.273579,	-6.966062,	7.070926,	0.001243,	0.002089,	2.713870,	0.239238,	-0.147776,	0.261981,	-5.515728,	7.664346,
3.610315,	0.517505,	0.371945,	2.092520,	0.076866,	0.630798,	-0.106075,	-0.000231,	0.134907,	0.008762,	0.094175,	0.444221,	0.107453,	0.553006,	-0.104833,	0.000427,
0.516506,	2.857548,	-0.370013,	2.434956,	-0.061736,	0.775000,	0.135053,	-0.000283,	0.009139,	0.129625,	-0.081029,	0.453630,	-0.085691,	0.669647,	0.119584,	0.000532;*/


		// reference
		Xref << 0.577,0.577,0,-0.578,0,0,0,2,0,0,0,0,0,0,0,0;
	
	}
	
	
	
	
	
	public: std::vector<double> execute(std::vector<double> msg, std::vector<double> ref)
	{
		
		
		//Movimentar para cima e para baixo
		/*Iterations++;
		if(Iterations%500==0){
			static bool p=0;
			if(p==0){
				Xref << 0.577,0.577,0,-0.578,0,0,0,2,0,0,0,0,0,0,0,0;
				p=true;}
			else{
				Xref << 0.577,0.577,0,-0.578,0,0,0,3,0,0,0,0,0,0,0,0;
				p=false;
			}
		}*/
		
		
		Xref << 0.577,0.577,0,-0.578,0,ref.at(0),ref.at(1),ref.at(2),0,0,0,0,0,0,0,0; 
		
		
	
		// state vector
		X << msg.at(6), //aR
			 msg.at(7), //aL
	         msg.at(3), //roll
	         msg.at(4), //pitch
	         msg.at(5), //yaw
	         msg.at(0), //x
	         msg.at(1),// y
	         msg.at(2),// z
	         msg.at(14), // daR
	         msg.at(15), // daL
		     msg.at(11), // droll	
		     msg.at(12), // dpitch
		     msg.at(13), // dyaw
		     msg.at(8), // dx
		     msg.at(9), // dy
		     msg.at(10); //dz
		    	
		
		
                    
		
		// control law
		Erro = X-Xref;
		Input = -K*Erro;

		// Feedforward
		Input(0) = Input(0) + 37.3; 
		Input(1) = Input(1) + 37.3;

		
		
		
		std::vector<double> out(Input.data(), Input.data() + Input.rows() * Input.cols());
		return out;
	}
	
	
	
	
};


